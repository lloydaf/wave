{"version":3,"sources":["webpack:///../src/essentials/Colors/docs/Colors.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","colors","name","colorCode","Colors","ACTION_BLUE_1000","invertedText","ACTION_BLUE_900","ACTION_BLUE_350","ACTION_BLUE_50","FREEDOM_RED_1000","FREEDOM_RED_900","AUTHENTIC_BLUE_1100","AUTHENTIC_BLUE_900","AUTHENTIC_BLUE_550","AUTHENTIC_BLUE_350","AUTHENTIC_BLUE_200","AUTHENTIC_BLUE_50","WHITE","POSITIVE_GREEN_1000","POSITIVE_GREEN_900","POSITIVE_GREEN_350","POSITIVE_GREEN_50","ATTENTION_YELLOW_900","ATTENTION_YELLOW_350","ATTENTION_YELLOW_50","NEGATIVE_ORANGE_1000","NEGATIVE_ORANGE_900","NEGATIVE_ORANGE_350","NEGATIVE_ORANGE_50","BUMPY_MAGENTA_1000","BUMPY_MAGENTA_900","BUMPY_MAGENTA_350","BUMPY_MAGENTA_50","parentName","isMDXComponent"],"mappings":"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","file":"component---src-essentials-colors-docs-colors-mdx-faf9f6eb4cb784bfad11.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { ColorPalette } from './ColorPalette';\nimport { Colors } from '../Colors.ts';\nimport { SemanticColorsTable } from './SemanticColorsTable';\nimport { ColorPaletteContainer } from './ColorPaletteContainer';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h1>\n    <h2 {...{\n      \"id\": \"brand-colors\"\n    }}>{`Brand Colors`}</h2>\n    <p>{`Elements that must reflect the FREE NOW brand should use the primary brand colors. Each color has darker and lighter\nshades.`}</p>\n    <ColorPaletteContainer mdxType=\"ColorPaletteContainer\">\n    <ColorPalette colors={[{\n        name: 'Action Blue 1000',\n        colorCode: Colors.ACTION_BLUE_1000,\n        invertedText: true\n      }, {\n        name: 'Action Blue 900',\n        colorCode: Colors.ACTION_BLUE_900,\n        invertedText: true\n      }, {\n        name: 'Action Blue 350',\n        colorCode: Colors.ACTION_BLUE_350,\n        invertedText: false\n      }, {\n        name: 'Action Blue 50',\n        colorCode: Colors.ACTION_BLUE_50,\n        invertedText: false\n      }]} mdxType=\"ColorPalette\" />\n    <ColorPalette colors={[{\n        name: 'Freedom Red 1000',\n        colorCode: Colors.FREEDOM_RED_1000,\n        invertedText: true\n      }, {\n        name: 'Freedom Red 900',\n        colorCode: Colors.FREEDOM_RED_900,\n        invertedText: true\n      }]} mdxType=\"ColorPalette\" />\n    </ColorPaletteContainer>\n    <h3 {...{\n      \"id\": \"neutral-colors\"\n    }}>{`Neutral Colors`}</h3>\n    <p>{`Text, backgrounds, lines and borders should use neutral colors. There are additional darker and lighter shades of\nAuthentic Blue, especially for certain backgrounds.`}</p>\n    <ColorPaletteContainer mdxType=\"ColorPaletteContainer\">\n    <ColorPalette colors={[{\n        name: 'Authentic Blue 1100',\n        colorCode: Colors.AUTHENTIC_BLUE_1100,\n        invertedText: true\n      }, {\n        name: 'Authentic Blue 900',\n        colorCode: Colors.AUTHENTIC_BLUE_900,\n        invertedText: true\n      }, {\n        name: 'Authentic Blue 550',\n        colorCode: Colors.AUTHENTIC_BLUE_550,\n        invertedText: true\n      }, {\n        name: 'Authentic Blue 350',\n        colorCode: Colors.AUTHENTIC_BLUE_350,\n        invertedText: false\n      }, {\n        name: 'Authentic Blue 200',\n        colorCode: Colors.AUTHENTIC_BLUE_200,\n        invertedText: false\n      }, {\n        name: 'Authentic Blue 50',\n        colorCode: Colors.AUTHENTIC_BLUE_50,\n        invertedText: false\n      }, {\n        name: 'White',\n        colorCode: Colors.WHITE,\n        invertedText: false\n      }]} mdxType=\"ColorPalette\" />\n    </ColorPaletteContainer>\n    <h3 {...{\n      \"id\": \"ui-colors\"\n    }}>{`UI Colors`}</h3>\n    <p>{`Action buttons, alert messages, and form elements should use the main UI Colors. Input fields, for example, can\nget positive and negative feedback, whereas alert messages can have warning feedback.`}</p>\n    <ColorPaletteContainer mdxType=\"ColorPaletteContainer\">\n    <ColorPalette colors={[{\n        name: 'Positive Green 1000',\n        colorCode: Colors.POSITIVE_GREEN_1000,\n        invertedText: true\n      }, {\n        name: 'Positive Green 900',\n        colorCode: Colors.POSITIVE_GREEN_900,\n        invertedText: true\n      }, {\n        name: 'Positive Green 350',\n        colorCode: Colors.POSITIVE_GREEN_350,\n        invertedText: false\n      }, {\n        name: 'Positive Green 50',\n        colorCode: Colors.POSITIVE_GREEN_50,\n        invertedText: false\n      }]} mdxType=\"ColorPalette\" />\n    <ColorPalette colors={[{\n        name: 'Attention Yellow 900',\n        colorCode: Colors.ATTENTION_YELLOW_900,\n        invertedText: false\n      }, {\n        name: 'Attention Yellow 350',\n        colorCode: Colors.ATTENTION_YELLOW_350,\n        invertedText: false\n      }, {\n        name: 'Attention Yellow 50',\n        colorCode: Colors.ATTENTION_YELLOW_50,\n        invertedText: false\n      }]} mdxType=\"ColorPalette\" />\n    <ColorPalette colors={[{\n        name: 'Negative Orange 1000',\n        colorCode: Colors.NEGATIVE_ORANGE_1000,\n        invertedText: true\n      }, {\n        name: 'Negative Orange 900',\n        colorCode: Colors.NEGATIVE_ORANGE_900,\n        invertedText: true\n      }, {\n        name: 'Negative Orange 350',\n        colorCode: Colors.NEGATIVE_ORANGE_350,\n        invertedText: false\n      }, {\n        name: 'Negative Orange 50',\n        colorCode: Colors.NEGATIVE_ORANGE_50,\n        invertedText: false\n      }]} mdxType=\"ColorPalette\" />\n    <ColorPalette colors={[{\n        name: 'Bumpy Magenta 1000',\n        colorCode: Colors.BUMPY_MAGENTA_1000,\n        invertedText: true\n      }, {\n        name: 'Bumpy Magenta 900',\n        colorCode: Colors.BUMPY_MAGENTA_900,\n        invertedText: true\n      }, {\n        name: 'Bumpy Magenta 350',\n        colorCode: Colors.BUMPY_MAGENTA_350,\n        invertedText: false\n      }, {\n        name: 'Bumpy Magenta 50',\n        colorCode: Colors.BUMPY_MAGENTA_50,\n        invertedText: false\n      }]} mdxType=\"ColorPalette\" />\n    </ColorPaletteContainer>\n    <h2 {...{\n      \"id\": \"functional-reference\"\n    }}>{`Functional Reference`}</h2>\n    <p>{`In the table below you can find all functional colors with their name, and their color values. They can be accessed with\nthe `}<inlineCode parentName=\"p\">{`themeGet`}</inlineCode>{` function which is exported directly from the library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { themeGet } from '@freenow/wave'\n\nconst myTextColor = themeGet('semanticColors.text.secondary')\n`}</code></pre>\n    <SemanticColorsTable mdxType=\"SemanticColorsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}