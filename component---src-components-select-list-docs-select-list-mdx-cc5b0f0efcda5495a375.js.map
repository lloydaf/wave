{"version":3,"sources":["webpack:///../src/components/SelectList/docs/SelectList.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","component","supportedProps","parentName","__position","__code","__scope","SelectList","SelectListPropsTable","Playground","StyledSystemLinks","Combination","id","label","onChange","change","console","log","options","value","isDisabled","variant","size","inverted","error","isMulti","i","key","isClearable","isMDXComponent"],"mappings":"qiBAWO,IAAMA,EAAe,Q,+NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAsBA,QAAQ,yBAC9B,uBACA,YAAC,IAAD,CAAmBC,UAAU,aAAaC,eAAgB,CAAC,SAAU,SAAUF,QAAQ,sBACvF,uIACF,mBAAGG,WAAW,KAAQ,CAChB,KAAQ,gDADd,0BADE,KAIA,iBAAQ,CACN,GAAM,kBADR,kBAGA,iHACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,wBAApB,4CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,mBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,2CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAApB,4CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,gCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAEtB,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qVAAkWC,SAAO,GAC1YP,QACAH,kBACAW,eACAC,yBACAC,eACAC,sBACAC,iBAP0Y,gBAQ1Yf,IAR0Y,EAS1YH,eAT0Y,GAUzYO,QAAQ,cACX,YAAC,IAAD,CAAYY,GAAG,yBAAyBC,MAAM,OAAOC,SAAU,SAAAC,GAAM,OAAIC,QAAQC,IAAIF,IAASG,QAAS,CAAC,CACpGL,MAAO,YACPM,MAAO,OACN,CACDN,MAAO,UACPM,MAAO,OACN,CACDN,MAAO,QACPM,MAAO,MACPC,YAAY,IACVpB,QAAQ,gBAEd,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAaqB,QAAS,CAAC,QAAS,gBAAiBC,KAAM,CAAC,SAAU,SAAUC,SAAU,EAAC,GAAO,GAAOC,MAAO,EAAC,GAAO,GAAOC,QAAS,EAAC,GAAO,GAAOzB,QAAQ,gBAC1J,SAACD,EAAO2B,GAAR,OAAc,YAAC,IAAD,GAAYC,IAAKD,GAAO3B,EAAxB,CAA+BoB,MAAO,CACjDN,MAAO,SACNe,aAAa,EAAO5B,QAAQ,mBAEjC,iBAAQ,CACN,GAAM,WADR,WAGA,oDAAmC,0BAAYG,WAAW,KAAvB,iBAAnC,SAAsG,0BAAYA,WAAW,KAAvB,+BAAtG,4CAA0N,mBAAGA,WAAW,KAAQ,CAC5O,KAAQ,6BAD8M,gBAA1N,uFAG+B,mBAAGA,WAAW,KAAQ,CACjD,KAAQ,kDADmB,sBAH/B,0CAMK,mBAAGA,WAAW,KAAQ,CACvB,KAAQ,mEADP,QANL,mBASA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yuC,6NAiDTN,EAAWgC,gBAAiB","file":"component---src-components-select-list-docs-select-list-mdx-cc5b0f0efcda5495a375.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { SelectList } from '../SelectList.tsx';\nimport { SelectListPropsTable } from './SelectListPropsTable';\nimport { Playground } from 'docz';\nimport { StyledSystemLinks } from '../../../docs/StyledSystemLinks';\nimport { Combination } from '../../../docs/Combination';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <SelectListPropsTable mdxType=\"SelectListPropsTable\" />\n    <br />\n    <StyledSystemLinks component=\"SelectList\" supportedProps={['margin', 'width']} mdxType=\"StyledSystemLinks\" />\n    <p>{`Additionally, most of the properties for the react-select component are passed to the component (read more on\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://react-select.com/props#select-props\"\n      }}>{`react-select.com/props`}</a>{`)`}</p>\n    <h3 {...{\n      \"id\": \"disabled-props\"\n    }}>{`Disabled props`}</h3>\n    <p>{`The following properties have been disabled since they aren't supported by this library.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'react-select/async'`}</inlineCode>{` (Feature currently not supported at FN)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`theme`}</inlineCode>{` (Wave's theme)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`makeAnimated`}</inlineCode>{`(Feature currently not supported at FN)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`classNamePrefix`}</inlineCode>{` (directly defined into Wave SelectList)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isLoading`}</inlineCode>{` (Async not implemented yet)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`loadingMessage`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isRtl`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={2} __code={'<SelectList\\n  id=\\\"select-list-playground\\\"\\n  label=\\\"City\\\"\\n  onChange={change => console.log(change)}\\n  options={[\\n    {\\n      label: \\'Barcelona\\',\\n      value: \\'bcn\\',\\n    },\\n    {\\n      label: \\'Hamburg\\',\\n      value: \\'ham\\',\\n    },\\n    {\\n      label: \\'Paris\\',\\n      value: \\'par\\',\\n      isDisabled: true,\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      SelectList,\n      SelectListPropsTable,\n      Playground,\n      StyledSystemLinks,\n      Combination,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <SelectList id=\"select-list-playground\" label=\"City\" onChange={change => console.log(change)} options={[{\n        label: \"Barcelona\",\n        value: \"bcn\"\n      }, {\n        label: \"Hamburg\",\n        value: \"ham\"\n      }, {\n        label: \"Paris\",\n        value: \"par\",\n        isDisabled: true\n      }]} mdxType=\"SelectList\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"combinations\"\n    }}>{`Combinations`}</h2>\n    <Combination variant={[\"boxed\", \"bottom-lined\"]} size={[\"medium\", \"small\"]} inverted={[false, true]} error={[false, true]} isMulti={[false, true]} mdxType=\"Combination\">\n    {(props, i) => <SelectList key={i} {...props} value={{\n        label: 'Group'\n      }} isClearable={false} mdxType=\"SelectList\" />}\n    </Combination>\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <p>{`Testing this natively using `}<inlineCode parentName=\"p\">{`selectOptions`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`@testing-library/user-event`}</inlineCode>{` is difficult as this is built on top of `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-select.com\"\n      }}>{`react-select`}</a>{`, and so doesn't contain a native select element.\nYou can test it easily using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/romgain/react-select-event\"\n      }}>{`react-select-event`}</a>{` library like it's shown below\n(check `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/ecosystem-react-select-event/\"\n      }}>{`here`}</a>{` for more info)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { render, within } from '@testing-library/react'\nimport selectEvent from 'react-select-event'\n\ntest('should select option', () => {\n    const { queryByLabelText } = render(\n        <Box aria-label=\"SearchList Container\">\n            <SelectList\n                id=\"select-list-playground\"\n                label=\"City\"\n                onChange={(change) => console.log(change)}\n                options={[\n                    {\n                        label: \"Barcelona\",\n                        value: \"bcn\"\n                    },\n                    {\n                        label: \"Hamburg\",\n                        value: \"ham\"\n                    },\n                    {\n                        label: \"Paris\",\n                        value: \"par\"\n                    }\n                ]}\n            />\n        </Box>\n    );\n    const container = queryByLabelText(\n        'SearchList Container',\n    )\n\n    const inputbox = within(\n        container,\n    ).queryByRole('textbox')\n            \n    // this will open the menu\n    user.type(inputbox, 'Bar')\n\n    // use react-select-event to select the option you want\n    await selectEvent.select(container, ['Barcelona'])\n\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}