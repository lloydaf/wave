{"version":3,"sources":["webpack:///../src/components/Toggle/docs/Toggle.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","gridTemplate","defaultChecked","error","disabled","parentName","__position","__code","__scope","Playground","Toggle","ItemWrapper","isMDXComponent"],"mappings":"+gBASO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,uQAEA,YAAC,IAAD,CAAaC,aAAa,0BAA0BD,QAAQ,eAC5D,YAAC,IAAD,CAAQE,gBAAc,EAACF,QAAQ,WAC/B,YAAC,IAAD,CAAQA,QAAQ,WAChB,YAAC,IAAD,CAAQG,OAAK,EAACD,gBAAc,EAACF,QAAQ,WACrC,YAAC,IAAD,CAAQI,UAAQ,EAACJ,QAAQ,YAEzB,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIK,WAAW,MAAf,kGACA,kBAAIA,WAAW,MAAf,kEACA,kBAAIA,WAAW,MAAf,8DAEF,iBAAQ,CACN,GAAM,yBADR,yBAGA,wJACa,0BAAYA,WAAW,KAAvB,SADb,cAC6E,0BAAYA,WAAW,KAAvB,WAD7E,+BAEA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,aAAcC,SAAO,GACtDT,QACAH,kBACAa,eACAC,WACAC,iBALsD,gBAMtDf,IANsD,EAOtDH,eAPsD,GAQrDO,QAAQ,cACX,YAAC,IAAD,CAAQA,QAAQ,kB,qNAMpBH,EAAWe,gBAAiB","file":"component---src-components-toggle-docs-toggle-mdx-c02c9fe7266b0fa70d0c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Toggle } from '../Toggle';\nimport { ItemWrapper } from '../../../../docs/components/ItemWrapper.ts';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <p>{`Toggle is a control that is used to quickly switch between two possible states. Toggles are only used for these binary\nactions that occur immediately after the user “flips” the toggle switch. They are commonly used for “on/off” switches.`}</p>\n    <ItemWrapper gridTemplate=\"auto auto auto auto 1fr\" mdxType=\"ItemWrapper\">\n    <Toggle defaultChecked mdxType=\"Toggle\" />\n    <Toggle mdxType=\"Toggle\" />\n    <Toggle error defaultChecked mdxType=\"Toggle\" />\n    <Toggle disabled mdxType=\"Toggle\" />\n    </ItemWrapper>\n    <h2 {...{\n      \"id\": \"behaviour\"\n    }}>{`Behaviour`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use toggle to swap the state of a functionality or preference (usually between „on“ and „off“)`}</li>\n      <li parentName=\"ul\">{`For multi-state scenarios consider radio buttons or checkboxes`}</li>\n      <li parentName=\"ul\">{`Toggles should take affect automatically (without saving)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"technical-information\"\n    }}>{`Technical Information`}</h2>\n    <p>{`Inside the toggle component is a checkbox and therefore the api and usage works similarly. For example, instead\nof passing the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop, the `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` prop must be used instead.`}</p>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <Playground __position={1} __code={'<Toggle />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Toggle,\n      ItemWrapper,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Toggle mdxType=\"Toggle\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}