{"version":3,"sources":["webpack:///../src/components/Offcanvas/docs/Offcanvas.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","component","supportedProps","isMDXComponent"],"mappings":"+gBAUO,IAAMA,EAAe,Q,6NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,4RAGA,oMAEA,YAAC,IAAD,CAAkBA,QAAQ,qBAC1B,iBAAQ,CACN,GAAM,gBADR,gBAGA,gIACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,qfAiBL,iBAAQ,CACN,GAAM,OADR,OAGA,YAAC,IAAD,CAAqBD,QAAQ,wBAC7B,uBACA,YAAC,IAAD,CAAmBE,UAAU,YAAYC,eAAgB,CAAC,SAAUH,QAAQ,sBAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,kNAEyB,0BAAYC,WAAW,KAAvB,WAFzB,6BAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2FAML,iBAAQ,CACN,GAAM,QADR,QAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yP,2NAiBTJ,EAAWO,gBAAiB","file":"component---src-components-offcanvas-docs-offcanvas-mdx-1f66d3a060e065153fa3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Offcanvas } from '../Offcanvas.tsx';\nimport { OffcanvasCreator } from './OffcanvasCreator.tsx';\nimport { OffcanvasPropsTable } from './OffcanvasPropsTable.tsx';\nimport { StyledSystemLinks } from '../../../docs/StyledSystemLinks';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"offcanvas\"\n    }}>{`Offcanvas`}</h1>\n    <p>{`The Offcanvas should only contain content or flows which are related to the current page and not replace pages, therefore\nits complexity level has to be simple. Consider the fullscreen state if you want to focus the users attention to the Offcanvas\ncontent.`}</p>\n    <p>{`Offcanvas is responsive per default but the width can be adjusted (the default is 600px or 37.5rem). Content on the Offcanvas\nis scrollable and has a space5 bounding box.`}</p>\n    <OffcanvasCreator mdxType=\"OffcanvasCreator\" />\n    <h3 {...{\n      \"id\": \"example-code\"\n    }}>{`Example Code`}</h3>\n    <p>{`The following contains a simple example, with a resulting Offcanvas similar to the live examples above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [showOffcanvas, setShowOffcanvas] = useState(true);\n\n<Offcanvas onClose={() => setShowOffcanvas(false)} fullscreen={true}>\n    {dismiss => (\n        <>\n            <Headline as=\"h2\">Add Note</Headline>\n            <Text as=\"p\" my={3}>\n                Ensure that all participants are aware of the change.\n            </Text>\n            <Button onClick={dismiss}>Add Note</Button>\n            <TextButton onClick={dismiss}>Cancel</TextButton>\n        </>\n    )}\n</Offcanvas>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <OffcanvasPropsTable mdxType=\"OffcanvasPropsTable\" />\n    <br />\n    <StyledSystemLinks component=\"Offcanvas\" supportedProps={['width']} mdxType=\"StyledSystemLinks\" />\n    <h3 {...{\n      \"id\": \"dismiss\"\n    }}>{`Dismiss`}</h3>\n    <p>{`Offcanvas provides a function to dismiss the component with an animation. The\ndismiss function is available either through render props or a hook. After the\nanimation has finished the `}<inlineCode parentName=\"p\">{`onClose`}</inlineCode>{` callback will be called.`}</p>\n    <h4 {...{\n      \"id\": \"render-props\"\n    }}>{`Render Props`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Offcanvas>\n    {dismiss => <Button onClick={dismiss}>Close</Button>}\n</Offcanvas>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"hook\"\n    }}>{`Hook`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const InsideOffcanvas = () => {\n    const dismiss = useOffcanvasDismiss();\n    return <button onClick={dismiss}>Close</button>;\n}\n\nconst OffcanvasWrapper = () => (\n    <Offcanvas>\n        <InsideOffcanvas />\n    </Offcanvas>\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}