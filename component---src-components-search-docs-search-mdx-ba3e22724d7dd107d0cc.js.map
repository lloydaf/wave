{"version":3,"sources":["webpack:///../src/components/Search/docs/Search.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","width","placeholder","results","size","__position","__code","__scope","Playground","SearchPropsTable","ItemWrapper","Headline","Search","TextExample","DisabledExample","PlaceholderExample","APIExample","isMDXComponent"],"mappings":"ijBAYO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,UADR,UAGA,iBAAQ,CACN,GAAM,SADR,SAGA,iHAAgG,0BAAYC,WAAW,KAAvB,UAAhG,8HAEA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAkBD,QAAQ,qBAC1B,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAf,4FACA,kBAAIA,WAAW,MAAf,yEACA,kBAAIA,WAAW,MAAf,iHAEF,iBAAQ,CACN,GAAM,cADR,cAGA,6IAA4H,0BAAYA,WAAW,KAAvB,SAA5H,SAAuL,0BAAYA,WAAW,KAAvB,WAAvL,wCACA,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAaD,QAAQ,gBACrB,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,6zBA6BL,iBAAQ,CACN,GAAM,oBADR,oBAGA,YAAC,IAAD,CAAoBD,QAAQ,uBAC5B,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,4ZAWL,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAiBD,QAAQ,oBACzB,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,kIAKL,iBAAQ,CACN,GAAM,wBADR,wBAGA,YAAC,IAAD,CAAYD,QAAQ,eACpB,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,4uBA0BL,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,kBADR,oBAGA,YAAC,IAAD,CAAQC,MAAM,QAAQC,YAAY,oBAAoBC,QAAS,GAAIJ,QAAQ,WAC3E,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAQE,MAAM,QAAQC,YAAY,oBAAoBE,KAAK,QAAQD,QAAS,GAAIJ,QAAQ,WACxF,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYM,WAAY,EAAGC,OAAQ,6CAAgDC,SAAO,GACxFT,QACAH,kBACAa,eACAC,qBACAC,gBACAC,aACAC,WACAC,gBACAC,oBACAC,uBACAC,gBAXwF,gBAYxFrB,IAZwF,EAaxFH,eAbwF,GAcvFO,QAAQ,cACb,YAAC,IAAD,CAAQG,YAAY,oBAAoBH,QAAQ,kB,qNAMlDH,EAAWqB,gBAAiB","file":"component---src-components-search-docs-search-mdx-ba3e22724d7dd107d0cc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { SearchPropsTable } from './SearchProps';\nimport { ItemWrapper } from '../../../../docs/components/ItemWrapper.ts';\nimport { Headline } from '../../Headline/Headline';\nimport { Search } from '../Search';\nimport { TextExample, DisabledExample, PlaceholderExample, APIExample } from './Examples';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"search\"\n    }}>{`Search`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`This component is used to act as a minimal search box. The component provides you with a `}<inlineCode parentName=\"p\">{`Search`}</inlineCode>{` component, which can be imported and used.\nThe results property passed into this component show up as the search results`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <SearchPropsTable mdxType=\"SearchPropsTable\" />\n    <h2 {...{\n      \"id\": \"appearance\"\n    }}>{`Appearance`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`placeholder: This describes the text value to display as a placeholder in the search box`}</li>\n      <li parentName=\"ul\">{`value: This describes the default value to be taken by the search box`}</li>\n      <li parentName=\"ul\">{`results: The search results. This is an array of components (whatever you want to render as a result object)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"navigation\"\n    }}>{`Navigation`}</h2>\n    <p>{`You can navigate among the search results using your keyboard arrow keys. Upon navigating to an element and pressing `}<inlineCode parentName=\"p\">{`Enter`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` function of that element is called.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h3>\n    <TextExample mdxType=\"TextExample\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const namesArray = ['Adam', 'Barry', 'Charles', 'David'];\nconst mapName = (name, index) => (\n    <Box\n        key={index}\n        height=\"2.5rem\"\n        display=\"flex\"\n        alignItems=\"center\"\n        onClick={() => {\n            alert(\\`\\${name} was clicked!\\`)\n            setValue(name)\n            setShowResults(false)\n        }}\n    >\n        <Text marginLeft=\"1rem\">{name}</Text>\n    </Box>\n);\nconst [value, setValue] = useState<string>('');\nconst [showResults, setShowResults] = useState<boolean>(false);\nconst results = namesArray.filter(name => name.toLowerCase().includes(value.toLowerCase())).map(mapName);\nreturn <Search \n    value={value} \n    setValue={setValue} width=\"20rem\" \n    results={results} \n    showResults={showResults} \n    setShowResults={setShowResults}\n/>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-placeholder\"\n    }}>{`With Placeholder`}</h3>\n    <PlaceholderExample mdxType=\"PlaceholderExample\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const namesArray = ['Adam', 'Barry', 'Charles', 'David'];\nconst mapName = (name, index) => (\n    <Box key={index} height=\"2.5rem\"display=\"flex\" alignItems=\"center\" onClick={() => alert(\\`\\${name} was clicked!\\`)}>\n        <Text marginLeft=\"1rem\">{name}</Text>\n    </Box>\n);\nconst names = namesArray.map(mapName);\nreturn <Search width=\"12rem\" placeholder=\"Search for a name\" results={names} />;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <DisabledExample mdxType=\"DisabledExample\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const options = [1, 2, 3, 4].map(item => <Text>{item}</Text>);\nreturn <Search disabled width=\"12rem\" results={options} />;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"integration-with-api\"\n    }}>{`Integration with API`}</h3>\n    <APIExample mdxType=\"APIExample\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const searchAPI = (name: string) => \\`https://swapi.dev/api/people/?search=\\${name}\\`;\n\nconst mapName = ({ name }, index) => (\n    <Box key={index} height=\"2.5rem\"display=\"flex\" alignItems=\"center\" onClick={() => alert(\\`\\${name} was clicked!\\`)}>\n        <Text marginLeft=\"1rem\">{name}</Text>\n    </Box>\n);\n\nconst fetchCharacter = async (name: string) => {\n    const response = await (await fetch(searchAPI(name))).json();\n    setResults(response.results?.map(mapName));\n};\n\nconst [results, setResults] = useState([]);\nreturn (\n    <Search\n        width=\"20rem\"\n        placeholder=\"Enter a name\"\n        results={results}\n        onInputChange={name => fetchCharacter(name)}\n        onClear={() => setResults([])}\n    />\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h2>\n    <h3 {...{\n      \"id\": \"medium-default\"\n    }}>{`Medium (default)`}</h3>\n    <Search width=\"12rem\" placeholder=\"Search for a name\" results={[]} mdxType=\"Search\" />\n    <h3 {...{\n      \"id\": \"small\"\n    }}>{`Small`}</h3>\n    <Search width=\"12rem\" placeholder=\"Search for a name\" size=\"small\" results={[]} mdxType=\"Search\" />\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <Playground __position={7} __code={'<Search placeholder=\\\"Search for a name\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SearchPropsTable,\n      ItemWrapper,\n      Headline,\n      Search,\n      TextExample,\n      DisabledExample,\n      PlaceholderExample,\n      APIExample,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Search placeholder=\"Search for a name\" mdxType=\"Search\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}